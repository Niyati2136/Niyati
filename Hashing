#include <iostream>
#include <list>
#include <iterator>
using namespace std;

class HashTable {
private:
    static const int TABLE_SIZE = 10; 
    list<pair<int, string>> table[TABLE_SIZE]; 

public:
    int hashFunction(int key) {
        return key % TABLE_SIZE;
    }
    
    void insert(int key, const string &value) {
        int index = hashFunction(key);
        for (auto &entry : table[index]) {
            if (entry.first == key) {
                entry.second = value;  
                return;
            }
        }
        table[index].push_back(make_pair(key, value));
    }

    string find(int key) {
        int index = hashFunction(key);
        for (auto &entry : table[index]) {
            if (entry.first == key) {
                return entry.second; 
            }
        }
        return "Not Found"; 
    }

    void deleteKey(int key) {
        int index = hashFunction(key);
        auto &chain = table[index];
        for (auto it = chain.begin(); it != chain.end(); ++it) {
            if (it->first == key) {
                chain.erase(it); 
                cout << "Deleted key " << key << endl;
                return;
            }
        }
        cout << "Key " << key << " not found!" << endl; 
    }

    void display() {
        for (int i = 0; i < TABLE_SIZE; i++) {
            cout << "Index " << i << ": ";
            for (auto &entry : table[i]) {
                cout << "(" << entry.first << ", " << entry.second << ") ";
            }
            cout << endl;
        }
    }
};

int main() {
    HashTable ht;

    ht.insert(10, "Ten");
    ht.insert(2, "Two");
    ht.insert(4, "Four");
    ht.insert(91, "Ninety-One");
    ht.insert(11, "Eleven");
    ht.insert(12, "Tweleve");
    ht.insert(25, "Twenty-Five");
    ht.insert(33, "Thirty-Three");
    
    ht.display();
    cout << endl;

    cout << "Find key 2: " << ht.find(2) << endl;
    cout << "Find key 3: " << ht.find(3) << endl;
    cout << "Find key 100: " << ht.find(100) << endl;
    cout << "Find Key 11: " << ht.find (11) << endl;
    
    cout << endl;
    ht.deleteKey(2);
    ht.display();
    cout << endl;

    ht.deleteKey(100);
    ht.deleteKey(33);
    cout << "**Exiting the Program**"; 
    return 0;
}

#include <iostream>
#include <climits>  // Include for INT_MAX
using namespace std;

// Function to get sum of frequencies from index i to j
int sum(int frequency[], int i, int j) {
    int sum = 0;
    for (int x = i; x <= j; x++)
        sum += frequency[x];
    return sum;
}

// Recursive function to calculate optimal cost
int optimalCost(int frequency[], int i, int j) {
    if (j < i)
        return 0;
    if (j == i)
        return frequency[i];

    int frequencySum = sum(frequency, i, j);
    int minCost = INT_MAX;

    for (int r = i; r <= j; ++r) {
        int cost = optimalCost(frequency, i, r - 1) + optimalCost(frequency, r + 1, j);
        if (cost < minCost)
            minCost = cost;
    }

    return minCost + frequencySum;
}

// Wrapper function
int optimalSearchTree(int frequency[], int n) {
    return optimalCost(frequency, 0, n - 1);
}

int main() {
    int keys[] = {10, 12, 20};
    int frequency[] = {34, 0, 50};  // Can be any non-negative numbers
    int n = sizeof(keys) / sizeof(keys[0]);

    cout << "\nCost of Optimal BST is : " << optimalSearchTree(frequency, n) << endl;
    return 0;
}

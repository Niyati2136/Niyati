#include <iostream>
#include <string>
#include <algorithm>
#include <map>
using namespace std;

struct Node {
    string keyword;
    string meaning;
    int height;
    Node* left;
    Node* right;

    Node(string k, string m) {
        keyword = k;
        meaning = m;
        height = 1;
        left = right = nullptr;
    }
};

class AVLTree {
private:
    Node* root;

    int height(Node* node) {
        if (!node) return 0;
        return node->height;
    }

    int getBalance(Node* node) {
        if (!node) return 0;
        return height(node->left) - height(node->right);
    }

    Node* rightRotate(Node* node) {
        Node* newRoot = node->left;
        Node* temp = newRoot->right;
        newRoot->right = node;
        node->left = temp;

        node->height = max(height(node->left), height(node->right)) + 1;
        newRoot->height = max(height(newRoot->left), height(newRoot->right)) + 1;

        return newRoot;
    }

    Node* leftRotate(Node* node) {
        Node* newRoot = node->right;
        Node* temp = newRoot->left;
        newRoot->left = node;
        node->right = temp;

        node->height = max(height(node->left), height(node->right)) + 1;
        newRoot->height = max(height(newRoot->left), height(newRoot->right)) + 1;

        return newRoot;
    }

    Node* insert(Node* node, string keyword, string meaning) {
        if (!node) return new Node(keyword, meaning);

        if (keyword < node->keyword) {
            node->left = insert(node->left, keyword, meaning);
        } else if (keyword > node->keyword) {
            node->right = insert(node->right, keyword, meaning);
        } else {
            return node; 
        }

        node->height = max(height(node->left), height(node->right)) + 1;
        int balance = getBalance(node);
        if (balance > 1 && keyword < node->left->keyword) {
            return rightRotate(node);
        }
        if (balance < -1 && keyword > node->right->keyword) {
            return leftRotate(node);
        }
        if (balance > 1 && keyword > node->left->keyword) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
        if (balance < -1 && keyword < node->right->keyword) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    // Inorder traversal (ascending order)
    void inorder(Node* node) {
        if (node) {
            inorder(node->left);
            cout << node->keyword << ": " << node->meaning << endl;
            inorder(node->right);
        }
    }

    // Search for a keyword in the AVL tree
    Node* search(Node* node, string keyword) {
        if (!node || node->keyword == keyword) return node;
        if (keyword < node->keyword) return search(node->left, keyword);
        return search(node->right, keyword);
    }

    // Function to delete a node
    Node* deleteNode(Node* root, string keyword) {
        if (!root) return root;

        // Perform normal BST deletion
        if (keyword < root->keyword) {
            root->left = deleteNode(root->left, keyword);
        } else if (keyword > root->keyword) {
            root->right = deleteNode(root->right, keyword);
        } else {
            // Node to be deleted is found
            if (!root->left || !root->right) {
                Node* temp = root->left ? root->left : root->right;
                if (!temp) {
                    temp = root;
                    root = nullptr;
                } else {
                    *root = *temp;
                }
                delete temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->keyword = temp->keyword;
                root->meaning = temp->meaning;
                root->right = deleteNode(root->right, temp->keyword);
            }
        }

        if (!root) return root;

        root->height = max(height(root->left), height(root->right)) + 1;
        int balance = getBalance(root);
        if (balance > 1 && getBalance(root->left) >= 0) {
            return rightRotate(root);
        }
        if (balance < -1 && getBalance(root->right) <= 0) {
            return leftRotate(root);
        }
        if (balance > 1 && getBalance(root->left) < 0) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }
        if (balance < -1 && getBalance(root->right) > 0) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        return root;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left) current = current->left;
        return current;
    }

public:
    AVLTree() : root(nullptr) {}

    void insert(string keyword, string meaning) {
        root = insert(root, keyword, meaning);
    }

    void deleteKeyword(string keyword) {
        root = deleteNode(root, keyword);
    }

    void searchKeyword(string keyword) {
        Node* node = search(root, keyword);
        if (node) {
            cout << "Keyword: " << node->keyword << ", Meaning: " << node->meaning << endl;
        } else {
            cout << "Keyword not found!" << endl;
        }
    }

    void updateMeaning(string keyword, string newMeaning) {
        Node* node = search(root, keyword);
        if (node) {
            node->meaning = newMeaning;
            cout << "Updated meaning for " << keyword << ": " << newMeaning << endl;
        } else {
            cout << "Keyword not found!" << endl;
        }
    }

    void displayAscending() {
        inorder(root);
    }

    void displayDescending(Node* node) {
        if (node) {
            displayDescending(node->right);
            cout << node->keyword << ": " << node->meaning << endl;
            displayDescending(node->left);
        }
    }

    void displayDescending() {
        displayDescending(root);
    }
};

int main() {
    AVLTree dictionary;

    dictionary.insert("Tomato", "A fruit");
    dictionary.insert("Mango", "A yellow fruit");
    dictionary.insert("Dog", "A small pet animal");

    cout << "Displaying Dictionary in Ascending Order:" << endl;
    dictionary.displayAscending();

    dictionary.updateMeaning("Mango", "King of fruits");
    dictionary.searchKeyword("Mango");

    dictionary.deleteKeyword("Apple");
    dictionary.deleteKeyword("Tomato");

    cout << "\nDisplaying Dictionary in Descending Order:" << endl;
    dictionary.displayDescending();

    return 0;
}
